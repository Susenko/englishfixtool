"use client";

import { useEffect, useState } from "react";

type MistakeStat = {
  type: string;
  count: number;
  examples: string[];
  progress: "up" | "down" | "same";
  recommendation: string;
};

type UserStats = {
  level: string;
  topMistakes: MistakeStat[];
};

const categoryMap: Record<string, { ua: string; recommendation: string }> = {
  Articles: {
    ua: "–ê—Ä—Ç–∏–∫–ª—ñ",
    recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∂–∏–≤–∞–Ω–Ω—è a/an/the",
  },
  WordOrder: {
    ua: "–ü–æ—Ä—è–¥–æ–∫ —Å–ª—ñ–≤ (Word Order)",
    recommendation: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ—á–µ–Ω—å",
  },
  VerbTenses: {
    ua: "–ß–∞—Å–∏ –¥—ñ—î—Å–ª—ñ–≤  (Verb Tenses)",
    recommendation: "–í–∏–≤—á–∏—Ç–∏ —á–∞—Å–∏ Present, Past, Future",
  },
  SubjectVerbAgreement: {
    ua: "–£–∑–≥–æ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥–º–µ—Ç–∞ –π –ø—Ä–∏—Å—É–¥–∫–∞",
    recommendation: "–ü—Ä–∏–∫–ª–∞–¥: She don‚Äôt like –∑–∞–º—ñ—Å—Ç—å She doesn‚Äôt like.",
  },
  Prepositions: {
    ua: "–ü—Ä–∏–π–º–µ–Ω–Ω–∏–∫–∏",
    recommendation: "on environment –∑–∞–º—ñ—Å—Ç—å in environment",
  },
  WordChoice: {
    ua: "–°–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∞—Å",
    recommendation: "–ó–±—ñ–ª—å—à–∏—Ç–∏ —Å–ª–æ–≤–Ω–∏–∫–æ–≤–∏–π –∑–∞–ø–∞—Å —ñ —É–Ω–∏–∫–∞—Ç–∏ –∫–∞–ª—å–æ–∫",
  },
  QuestionFormation: {
    ua: "–§–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω—å",
    recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø–∏—Ç–∞–Ω—å —É Present/Past",
  },
  BusinessTone: {
    ua: "–§–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å",
    recommendation: "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏–π —Ç–æ–Ω —É –¥—ñ–ª–æ–≤–æ–º—É –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—ñ",
  },
  SentenceFlow: {
    ua: "–ü–ª–∞–≤–Ω—ñ—Å—Ç—å —Ä–µ—á–µ–Ω–Ω—è",
    recommendation: "–ó—Ä–æ–±–∏—Ç–∏ —Ä–µ—á–µ–Ω–Ω—è –ª–æ–≥—ñ—á–Ω—ñ—à–∏–º–∏ –π –∑–≤‚Äô—è–∑–Ω—ñ—à–∏–º–∏",
  },
  Spelling: {
    ua: "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ—ñ—è",
    recommendation: "–ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è —Å–ª—ñ–≤",
  },
};

export default function HomePage() {
  const [stats, setStats] = useState<UserStats | null>(null);

  useEffect(() => {
    const loadStats = async () => {
      try {
        const res = await fetch("http://localhost:8000/statistics");
        const data = await res.json();

        const statsArray: MistakeStat[] = Object.entries(data).map(
          ([key, count]) => ({
            type: categoryMap[key]?.ua || key,
            count: typeof count === "number" ? count : 0,
            examples: [], // –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
            progress: "same",
            recommendation: categoryMap[key]?.recommendation || "",
          })
        );

        setStats({
          level: "B1", // –ü–æ–∫–∏ —Å—Ç–∞—Ç–∏—á–Ω–æ
          topMistakes: statsArray.sort((a, b) => b.count - a.count),
        });
      } catch (err) {
        console.error("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", err);
      }
    };

    loadStats();
  }, []);

  const getProgressSymbol = (progress: string) => {
    switch (progress) {
      case "up":
        return "‚¨Ü";
      case "down":
        return "‚¨á";
      default:
        return "üü∞";
    }
  };

  return (
    <div className="max-w-5xl mx-auto p-4">
      <h1 className="text-4xl font-bold mb-6">
        –†—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó:{" "}
        <span className="text-blue-600">{stats?.level || "..."}</span>
      </h1>

      <h2 className="text-2xl font-semibold mb-4">
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
      </h2>

      <table className="w-full text-left border border-gray-300 rounded overflow-hidden">
        <thead className="bg-gray-100">
          <tr>
            <th className="p-2 border">–¢–∏–ø –ø–æ–º–∏–ª–∫–∏</th>
            <th className="p-2 border">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
            <th className="p-2 border">–ü—Ä–∏–∫–ª–∞–¥–∏</th>
            <th className="p-2 border">–ü—Ä–æ–≥—Ä–µ—Å</th>
            <th className="p-2 border">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          {stats?.topMistakes.map((mistake, index) => (
            <tr key={index} className="border-t">
              <td className="p-2 border font-medium">{mistake.type}</td>
              <td className="p-2 border">{mistake.count}</td>
              <td className="p-2 border text-gray-600 italic text-sm">
                {mistake.examples.length ? (
                  <ul className="list-disc list-inside">
                    {mistake.examples.map((ex, i) => (
                      <li key={i}>{ex}</li>
                    ))}
                  </ul>
                ) : (
                  "‚Äî"
                )}
              </td>
              <td className="p-2 border text-center text-lg">
                {getProgressSymbol(mistake.progress)}
              </td>
              <td className="p-2 border text-sm">{mistake.recommendation}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

"use client";

import { useEffect, useState } from "react";

type MistakeStat = {
  type: string;
  count: number;
  examples: string[];
  progress: "up" | "down" | "same";
  recommendation: string;
};

type UserStats = {
  level: string;
  topMistakes: MistakeStat[];
};

export default function HomePage() {
  const [stats, setStats] = useState<UserStats | null>(null);

  useEffect(() => {
    const mockStats: UserStats = {
      level: "B1",
      topMistakes: [
        {
          type: "–ê—Ä—Ç–∏–∫–ª—ñ",
          count: 6,
          examples: ["I want apple", "He is engineer"],
          progress: "down",
          recommendation: "–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤–∂–∏–≤–∞–Ω–Ω—è a/an/the",
        },
        {
          type: "–ì—Ä–∞–º–∞—Ç–∏–∫–∞",
          count: 10,
          examples: ["She don‚Äôt like pizza", "I goed to school"],
          progress: "same",
          recommendation: "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ Present Simple —Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥—ñ—î—Å–ª–æ–≤–∞",
        },
        {
          type: "–°—Ç–∏–ª—å",
          count: 3,
          examples: ["Please, learn comments", "I spended some time..."],
          progress: "up",
          recommendation: "–ó–≤–µ—Ä–Ω—É—Ç–∏ —É–≤–∞–≥—É –Ω–∞ —Ñ–æ—Ä–º—É–ª—é–≤–∞–Ω–Ω—è —è–∫ —É native-—Å–ø—ñ–∫–µ—Ä—ñ–≤",
        },
      ],
    };

    setStats(mockStats);
  }, []);

  const getProgressSymbol = (progress: string) => {
    switch (progress) {
      case "up":
        return "‚¨Ü";
      case "down":
        return "‚¨á";
      default:
        return "üü∞";
    }
  };

  return (
    <div className="max-w-5xl mx-auto p-4">
      <h1 className="text-4xl font-bold mb-6">
        –†—ñ–≤–µ–Ω—å –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó: <span className="text-blue-600">{stats?.level || "..."}</span>
      </h1>

      <h2 className="text-2xl font-semibold mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫</h2>

      <table className="w-full text-left border border-gray-300 rounded overflow-hidden">
        <thead className="bg-gray-100">
          <tr>
            <th className="p-2 border">–¢–∏–ø –ø–æ–º–∏–ª–∫–∏</th>
            <th className="p-2 border">–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
            <th className="p-2 border">–ü—Ä–∏–∫–ª–∞–¥–∏</th>
            <th className="p-2 border">–ü—Ä–æ–≥—Ä–µ—Å</th>
            <th className="p-2 border">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</th>
          </tr>
        </thead>
        <tbody>
          {stats?.topMistakes.map((mistake, index) => (
            <tr key={index} className="border-t">
              <td className="p-2 border font-medium">{mistake.type}</td>
              <td className="p-2 border">{mistake.count}</td>
              <td className="p-2 border">
                <ul className="list-disc list-inside text-sm text-gray-700">
                  {mistake.examples.map((ex, i) => (
                    <li key={i}>{ex}</li>
                  ))}
                </ul>
              </td>
              <td className="p-2 border text-center text-lg">
                {getProgressSymbol(mistake.progress)}
              </td>
              <td className="p-2 border text-sm text-gray-800">
                {mistake.recommendation}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

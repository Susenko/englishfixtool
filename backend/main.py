from fastapi import FastAPI
from pydantic import BaseModel
from openai import OpenAI
import os
import logging
from fastapi.middleware.cors import CORSMiddleware

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

app = FastAPI()

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –õ–æ–≥–µ—Ä
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("/app/uvicorn.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class NativeLikeRequest(BaseModel):
    text: str

@app.post("/nativelike")
def analyze_native_like(data: NativeLikeRequest):
    logger.info("‚û°Ô∏è  –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ /nativelike")
    logger.info(f"üì© –í–≤–µ–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç: {data.text}")

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{
                "role": "user",
                "content": f"""
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ä–µ—á–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é: "{data.text}"

1. –ß–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–µ –≤–æ–Ω–æ –≥—Ä–∞–º–∞—Ç–∏—á–Ω–æ/–ª–µ–∫—Å–∏—á–Ω–æ?
2. –Ø–∫—â–æ –Ω—ñ ‚Äî —è–∫ —Ü–µ —Å–ø—Ä–∏–π–º–∞—î—Ç—å—Å—è –Ω–∞ —Å–ª—É—Ö (—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é), —è–∫ –±–∏ —Ü–µ "–∑–≤—É—á–∞–ª–æ" –≤—ñ–¥ –Ω–µ-–Ω–µ–π—Ç–∏–≤–∞?

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É JSON:
{{
  "is_correct": true/false,
  "native_perception": "..."
}}
                """
            }],
            temperature=0.3,
        )

        content = response.choices[0].message.content
        logger.info(f"‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI: {content}")

        return {
            "is_correct": False,  # —Ç–∏–º—á–∞—Å–æ–≤–æ
            "native_perception": content
        }

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI: {str(e)}")
        return {
            "is_correct": False,
            "native_perception": "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ —Ç–µ–∫—Å—Ç—É.",
            "error": str(e)
        }
